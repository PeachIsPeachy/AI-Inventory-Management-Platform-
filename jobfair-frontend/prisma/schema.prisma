// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  COMPANY
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  tel            String?
  role           Role      @default(USER)
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favouriteIds   String[]  @db.ObjectId
  companyId      String?   @db.ObjectId

  accounts   Account[]
  companies  Company[]
  interviews Interview[]
  reviews    Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      String
  address       String
  locationValue String
  website       String
  tel           String
  userId        String   @db.ObjectId

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews   Interview[]
  reviews      Review[]
  jobPositions JobPosition[] // New field representing the list of job positions for this company
}

model JobPosition {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  responsibilities String[]
  salary           String
  type             String
  experience       String
  skills           String[]
  companyId        String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Interview Interview[]
}

model Interview {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  companyId     String   @db.ObjectId
  interviewDate DateTime
  jobPositionId String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobPosition JobPosition @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String
  userId    String   @db.ObjectId
  companyId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
